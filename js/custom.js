// js/custom.js

// Include jsPDF in your HTML <head>:
// <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

// Mock certificate data
const mockCertificates = [
  {
    trainsetId: "KMRL-001",
    certificateNo: "FC-2024-001",
    issueDate: "2024-09-18",
    expiryDate: "2025-09-20",
    inspector: "R. Nair",
    remarks: "All parameters within limits"
  },
  {
    trainsetId: "KMRL-002",
    certificateNo: "FC-2024-002",
    issueDate: "2024-06-10",
    expiryDate: "2025-12-15",
    inspector: "A. Kumar",
    remarks: "Minor brake pad wear noted"
  },
  {
    trainsetId: "KMRL-003",
    certificateNo: "FC-2024-003",
    issueDate: "2024-08-05",
    expiryDate: "2025-09-18",
    inspector: "S. Menon",
    remarks: "HVAC maintenance due soon"
  },
  {
    trainsetId: "KMRL-004",
    certificateNo: "FC-2024-004",
    issueDate: "2024-03-22",
    expiryDate: "2026-03-10",
    inspector: "P. Varghese",
    remarks: "No issues"
  }
];

// Utility: format date
function formatDate(dateStr) {
  const d = new Date(dateStr);
  return d.toLocaleDateString("en-IN", { year: "numeric", month: "short", day: "numeric" });
}

// Utility: days until expiry
function daysUntil(expiryDate) {
  const diff = new Date(expiryDate) - new Date();
  return Math.ceil(diff / (1000 * 60 * 60 * 24));
}

// Generate a PDF that includes a header and a table of certificates
async function generateCertificatePdf(cert) {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF({ unit: "pt", format: "A4" });
  const startX = 40;
  let y = 60;

  // Title
  doc.setFontSize(18);
  doc.text("Kochi Metro Rail Fitness Certificate", startX, y);
  y += 30;

  // Document metadata header box
  doc.setFontSize(12);
  doc.setDrawColor(0, 0, 0);
  doc.rect(startX, y, 515, 50);
  doc.text(`Certificate No: ${cert.certificateNo}`, startX + 10, y + 15);
  doc.text(`Trainset ID: ${cert.trainsetId}`, startX + 10, y + 30);
  doc.text(`Issued: ${formatDate(cert.issueDate)}`, startX + 260, y + 15);
  doc.text(`Expires: ${formatDate(cert.expiryDate)}`, startX + 260, y + 30);
  y += 70;

  // Table header
  const headers = ["Field", "Value"];
  const col1X = startX;
  const col2X = startX + 200;
  const rowHeight = 20;

  doc.setFontSize(12);
  doc.setFillColor(230, 230, 230);
  doc.rect(col1X, y, 515, rowHeight, "F");
  doc.text(headers[0], col1X + 5, y + 14);
  doc.text(headers[1], col2X + 5, y + 14);
  y += rowHeight;

  // Table rows
  const rows = [
    ["Inspector", cert.inspector],
    ["Remarks", cert.remarks],
    ["Days Until Expiry", `${daysUntil(cert.expiryDate)} days`]
  ];

  rows.forEach(([field, value]) => {
    doc.setFontSize(11);
    doc.setDrawColor(200, 200, 200);
    doc.line(col1X, y, col1X + 515, y); // horizontal line
    doc.text(field, col1X + 5, y + 14);
    doc.text(String(value), col2X + 5, y + 14);
    y += rowHeight;
  });

  // Footer
  y += 20;
  doc.setFontSize(10);
  doc.text("Generated by RailOptima System", startX, y);

  return doc.output("blob");
}

// Render the HTML list of certificates with download buttons
function renderCertificatesList() {
  return mockCertificates
    .map((cert, idx) => {
      const daysLeft = daysUntil(cert.expiryDate);
      const isExpiring = daysLeft <= 30 && daysLeft >= 0;
      const isExpired = daysLeft < 0;
      const statusClass = isExpired ? "red" : isExpiring ? "orange" : "green";
      const borderClass = isExpired
        ? "border-red-600 bg-red-50"
        : isExpiring
        ? "border-orange-500 bg-orange-50"
        : "border-green-600 bg-green-50";

      return `
        <div class="p-4 mb-4 rounded-lg shadow-sm ${borderClass} flex justify-between items-start">
          <div>
            <h4 class="text-xl font-semibold">${cert.trainsetId} - ${cert.certificateNo}</h4>
            <p class="text-sm">Issued: ${formatDate(cert.issueDate)}</p>
            <p class="text-sm">Expires: <span class="text-${statusClass}-600 font-medium">${formatDate(cert.expiryDate)}</span></p>
            <p class="text-sm">Inspector: ${cert.inspector}</p>
            <p class="mt-2 text-sm italic text-gray-600">"${cert.remarks}"</p>
          </div>
          <div class="text-right space-y-2">
            <button data-pdf-index="${idx}" class="generate-pdf inline-block px-3 py-1 bg-blue-600 text-white text-xs rounded">
              Download Official PDF
            </button>
            <p class="text-xs text-${statusClass}-600">
              ${isExpired ? `${-daysLeft} days overdue` : `${daysLeft} days left`}
            </p>
          </div>
        </div>`;
    })
    .join("");
}

// Show the modal for certificates and wire up PDF generation
function showCertificatesModal() {
  const modal = document.createElement("div");
  modal.id = "certificates-modal";
  modal.className = "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";
  modal.innerHTML = `
    <div class="bg-white rounded-lg w-full max-w-3xl mx-4 max-h-[80vh] overflow-y-auto">
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-2xl font-bold">Fitness Certificates Dashboard</h3>
          <button id="close-cert-modal" class="text-gray-500 hover:text-gray-800">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        <div id="certificates-content">${renderCertificatesList()}</div>
      </div>
    </div>`;
  document.body.appendChild(modal);

  document.getElementById("close-cert-modal").addEventListener("click", () => modal.remove());

  // Attach PDF button handlers
  document.querySelectorAll(".generate-pdf").forEach(btn => {
    btn.addEventListener("click", async () => {
      const idx = parseInt(btn.getAttribute("data-pdf-index"), 10);
      const blob = await generateCertificatePdf(mockCertificates[idx]);
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `${mockCertificates[idx].certificateNo}.pdf`;
      a.click();
      URL.revokeObjectURL(url);
    });
  });
}

// Initialize on DOMContentLoaded
// Initial load and polling
document.addEventListener('DOMContentLoaded', () =>
   {
    loadCleaningDashboard();
setInterval(loadCleaningDashboard, 15000);

 async function loadCleaningDashboard() {
  try {
    const resp = await fetch('/api/cleaning-slots');
    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
    const data = await resp.json();
    updateCleaningUI(data);
  } catch (err) {
    console.error('Failed to load cleaning slots:', err);
  }
}
function updateCleaningUI(data) {
  // Update KPI values
  document.querySelector('#kpiBays p:last-child').textContent = data.kpi.baysOccupied;
  document.querySelector('#kpiStaff p:last-child').textContent = data.kpi.staffOnDuty;
  document.querySelector('#kpiScheduled p:last-child').textContent = data.kpi.scheduledToday;

  // Rebuild bay grid
  const bayGrid = document.getElementById('bayGrid');
  bayGrid.innerHTML = '';
  data.bays.forEach(bay => {
    const cell = document.createElement('div');
    cell.className = `bay bay-${bay.status}`;
    cell.textContent = bay.id;
    bayGrid.appendChild(cell);
  });
}


  // Attach click handler to the fitness card
  const card = document.querySelector('[data-feature="fitness-certificates"]');
  if (card) {
    card.style.cursor = "pointer";
    card.addEventListener("click", showCertificatesModal);
  }
});

// ===== Job-Card Status Integration =====

// Expanded mock data for 12+ Job-Card Status tickets
const jobCardData = [
  {
    ticketId: "JC-1001",
    department: "Mechanical",
    status: "Open",
    priority: "High",
    createdDate: "2025-09-15T09:30",
    updatedDate: "2025-09-16T14:35",
    assignedTo: "Engineer A. Sharma",
    description: "Brake system inspection pending",
    trainset: "KMRL-003",
    estimatedHours: 8,
    completionRate: 45,
    notes: "Awaiting brake pad replacement parts",
    location: "Bay 2A"
  },
  {
    ticketId: "JC-1002",
    department: "Electrical",
    status: "Closed",
    priority: "Medium",
    createdDate: "2025-09-14T11:00",
    updatedDate: "2025-09-15T16:20",
    assignedTo: "Engineer B. Kumar",
    description: "Lighting panel replacement complete",
    trainset: "KMRL-001",
    estimatedHours: 4,
    completionRate: 100,
    notes: "All LED panels replaced successfully",
    location: "Bay 1B"
  },
  {
    ticketId: "JC-1003",
    department: "Signal",
    status: "Open",
    priority: "Low",
    createdDate: "2025-09-13T08:15",
    updatedDate: "2025-09-14T10:10",
    assignedTo: "Engineer C. Menon",
    description: "Signal calibration scheduled",
    trainset: "KMRL-002",
    estimatedHours: 6,
    completionRate: 30,
    notes: "Calibration equipment ready",
    location: "Workshop A"
  },
  {
    ticketId: "JC-1004",
    department: "HVAC",
    status: "In Progress",
    priority: "High",
    createdDate: "2025-09-16T14:00",
    updatedDate: "2025-09-17T09:15",
    assignedTo: "Engineer D. Nair",
    description: "Air conditioning unit malfunction",
    trainset: "KMRL-004",
    estimatedHours: 12,
    completionRate: 65,
    notes: "Compressor replacement in progress",
    location: "Bay 3A"
  },
  {
    ticketId: "JC-1005",
    department: "Mechanical",
    status: "Open",
    priority: "Medium",
    createdDate: "2025-09-16T16:30",
    updatedDate: "2025-09-17T08:00",
    assignedTo: "Engineer E. Pillai",
    description: "Door mechanism adjustment required",
    trainset: "KMRL-001",
    estimatedHours: 3,
    completionRate: 0,
    notes: "Parts ordered, awaiting delivery",
    location: "Bay 2B"
  },
  {
    ticketId: "JC-1006",
    department: "Safety",
    status: "Closed",
    priority: "High",
    createdDate: "2025-09-12T10:45",
    updatedDate: "2025-09-13T17:30",
    assignedTo: "Inspector F. Thomas",
    description: "Emergency brake system check",
    trainset: "KMRL-003",
    estimatedHours: 2,
    completionRate: 100,
    notes: "All safety protocols verified",
    location: "Track 5"
  },
  {
    ticketId: "JC-1007",
    department: "Electrical",
    status: "Open",
    priority: "Medium",
    createdDate: "2025-09-17T07:00",
    updatedDate: "2025-09-17T10:30",
    assignedTo: "Engineer G. Varma",
    description: "Pantograph maintenance scheduled",
    trainset: "KMRL-002",
    estimatedHours: 5,
    completionRate: 20,
    notes: "Initial inspection completed",
    location: "Overhead Line Section"
  },
  {
    ticketId: "JC-1008",
    department: "Cleaning",
    status: "In Progress",
    priority: "Low",
    createdDate: "2025-09-17T06:00",
    updatedDate: "2025-09-17T11:00",
    assignedTo: "Team Lead H. Joseph",
    description: "Deep cleaning and sanitization",
    trainset: "KMRL-004",
    estimatedHours: 4,
    completionRate: 75,
    notes: "Interior cleaning 75% complete",
    location: "Cleaning Bay"
  },
  {
    ticketId: "JC-1009",
    department: "Signal",
    status: "Open",
    priority: "High",
    createdDate: "2025-09-16T19:00",
    updatedDate: "2025-09-17T08:30",
    assignedTo: "Engineer I. Rajan",
    description: "Communication system upgrade",
    trainset: "KMRL-001",
    estimatedHours: 10,
    completionRate: 15,
    notes: "New radio equipment installed",
    location: "Signal Room"
  },
  {
    ticketId: "JC-1010",
    department: "Mechanical",
    status: "Closed",
    priority: "Medium",
    createdDate: "2025-09-15T13:20",
    updatedDate: "2025-09-16T18:45",
    assignedTo: "Engineer J. Mathew",
    description: "Wheel alignment and balancing",
    trainset: "KMRL-002",
    estimatedHours: 6,
    completionRate: 100,
    notes: "Alignment completed within tolerance",
    location: "Wheel Shop"
  },
  {
    ticketId: "JC-1011",
    department: "HVAC",
    status: "Open",
    priority: "Low",
    createdDate: "2025-09-17T09:45",
    updatedDate: "2025-09-17T11:15",
    assignedTo: "Engineer K. Reddy",
    description: "Filter replacement routine maintenance",
    trainset: "KMRL-003",
    estimatedHours: 2,
    completionRate: 0,
    notes: "Scheduled for next maintenance window",
    location: "HVAC Workshop"
  },
  {
    ticketId: "JC-1012",
    department: "Electrical",
    status: "In Progress",
    priority: "High",
    createdDate: "2025-09-16T22:00",
    updatedDate: "2025-09-17T11:45",
    assignedTo: "Engineer L. Sasi",
    description: "Traction motor diagnostics",
    trainset: "KMRL-004",
    estimatedHours: 8,
    completionRate: 40,
    notes: "Motor performance analysis ongoing",
    location: "Traction Workshop"
  }
];

// Utility to format date/time for job cards
function formatDateTime(dateTimeStr) {
  const d = new Date(dateTimeStr);
  return d.toLocaleString("en-IN", {
    dateStyle: "medium",
    timeStyle: "short"
  });
}

// Get status badge styling
function getStatusBadge(status, priority) {
  if (status === "Open" && priority === "High") return "bg-red-500 text-white";
  if (status === "Open" && priority === "Medium") return "bg-orange-500 text-white";
  if (status === "Open") return "bg-yellow-500 text-white";
  if (status === "In Progress") return "bg-blue-500 text-white";
  if (status === "Closed") return "bg-green-500 text-white";
  return "bg-gray-300 text-gray-800";
}

// Get progress bar color
function getProgressColor(rate) {
  if (rate === 100) return "bg-green-500";
  if (rate >= 50) return "bg-blue-500";
  if (rate >= 25) return "bg-yellow-500";
  return "bg-red-500";
}

// Show detailed job card modal
function showJobCardDetails(ticket) {
  const detailModal = document.createElement("div");
  detailModal.id = "job-detail-modal";
  detailModal.className = "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]";
  detailModal.innerHTML = `
    <div class="bg-white rounded-xl w-full max-w-4xl mx-4 max-h-[85vh] overflow-y-auto shadow-2xl">
      <div class="bg-gradient-to-r from-metro-blue to-metro-green p-6 text-white">
        <div class="flex justify-between items-center">
          <div>
            <h2 class="text-3xl font-bold">${ticket.ticketId}</h2>
            <p class="text-lg opacity-90">${ticket.description}</p>
          </div>
          <button id="close-detail-modal" class="text-white hover:text-gray-200">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      </div>
      
      <div class="p-6">
        <!-- Status Cards Row -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div class="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-lg border-l-4 border-blue-500">
            <h4 class="font-semibold text-blue-800">Status</h4>
            <span class="px-3 py-1 rounded-full text-sm ${getStatusBadge(ticket.status, ticket.priority)}">
              ${ticket.status}
            </span>
          </div>
          <div class="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-lg border-l-4 border-green-500">
            <h4 class="font-semibold text-green-800">Progress</h4>
            <div class="mt-2">
              <div class="bg-gray-200 rounded-full h-3 w-full">
                <div class="${getProgressColor(ticket.completionRate)} h-3 rounded-full transition-all duration-500" style="width: ${ticket.completionRate}%"></div>
              </div>
              <p class="text-sm mt-1 font-medium">${ticket.completionRate}% Complete</p>
            </div>
          </div>
          <div class="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-lg border-l-4 border-purple-500">
            <h4 class="font-semibold text-purple-800">Priority</h4>
            <span class="text-lg font-bold ${ticket.priority === 'High' ? 'text-red-600' : ticket.priority === 'Medium' ? 'text-orange-600' : 'text-green-600'}">
              ${ticket.priority}
            </span>
          </div>
        </div>

        <!-- Details Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="space-y-4">
            <div class="bg-gray-50 p-4 rounded-lg">
              <h4 class="font-semibold text-gray-800 mb-2">Assignment Details</h4>
              <p><span class="font-medium">Assigned to:</span> ${ticket.assignedTo}</p>
              <p><span class="font-medium">Department:</span> ${ticket.department}</p>
              <p><span class="font-medium">Trainset:</span> ${ticket.trainset}</p>
              <p><span class="font-medium">Location:</span> ${ticket.location}</p>
            </div>
            
            <div class="bg-gray-50 p-4 rounded-lg">
              <h4 class="font-semibold text-gray-800 mb-2">Timeline</h4>
              <p><span class="font-medium">Created:</span> ${formatDateTime(ticket.createdDate)}</p>
              <p><span class="font-medium">Last Updated:</span> ${formatDateTime(ticket.updatedDate)}</p>
              <p><span class="font-medium">Estimated Hours:</span> ${ticket.estimatedHours}h</p>
            </div>
          </div>
          
          <div class="space-y-4">
            <div class="bg-yellow-50 p-4 rounded-lg border-l-4 border-yellow-400">
              <h4 class="font-semibold text-yellow-800 mb-2">Notes & Remarks</h4>
              <p class="text-gray-700 italic">"${ticket.notes}"</p>
            </div>
            
            <div class="bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400">
              <h4 class="font-semibold text-blue-800 mb-2">Actions</h4>
              <div class="space-y-2">
                <button class="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition">Update Status</button>
                <button class="w-full bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700 transition">Mark Complete</button>
                <button class="w-full bg-gray-600 text-white py-2 px-4 rounded hover:bg-gray-700 transition">Add Comment</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
  document.body.appendChild(detailModal);
  document.getElementById("close-detail-modal").onclick = () => detailModal.remove();
}

// Render job-card status list as HTML
function renderJobCardList() {
  return jobCardData.map(item => {
    const badgeClass = getStatusBadge(item.status, item.priority);
    const progressColor = getProgressColor(item.completionRate);

    return `
      <div class="p-4 mb-4 bg-white rounded-lg shadow-md border-l-4 ${item.priority === 'High' ? 'border-red-500' : item.priority === 'Medium' ? 'border-orange-500' : 'border-green-500'} hover:shadow-lg transition-shadow">
        <div class="flex justify-between items-start">
          <div class="flex-1">
            <div class="flex items-center mb-2">
              <h4 class="text-lg font-semibold mr-3">${item.ticketId}</h4>
              <span class="px-2 py-0.5 rounded text-xs ${badgeClass}">${item.status}</span>
              <span class="ml-2 px-2 py-0.5 rounded text-xs bg-gray-100 text-gray-700">${item.department}</span>
            </div>
            <p class="text-sm font-medium text-gray-800">${item.description}</p>
            <div class="mt-2 grid grid-cols-2 gap-4 text-xs text-gray-600">
              <p><strong>Trainset:</strong> ${item.trainset}</p>
              <p><strong>Assigned:</strong> ${item.assignedTo}</p>
              <p><strong>Location:</strong> ${item.location}</p>
              <p><strong>Priority:</strong> <span class="font-medium ${item.priority === 'High' ? 'text-red-600' : item.priority === 'Medium' ? 'text-orange-600' : 'text-green-600'}">${item.priority}</span></p>
            </div>
            <div class="mt-3">
              <div class="flex justify-between text-xs mb-1">
                <span>Progress</span>
                <span>${item.completionRate}%</span>
              </div>
              <div class="bg-gray-200 rounded-full h-2">
                <div class="${progressColor} h-2 rounded-full transition-all duration-300" style="width: ${item.completionRate}%"></div>
              </div>
            </div>
          </div>
          <div class="ml-4 text-right">
            <button onclick="showJobCardDetails(${JSON.stringify(item).replace(/"/g, '&quot;')})" class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition mb-2 block">
              View Details
            </button>
            <p class="text-xs text-gray-500">${formatDateTime(item.updatedDate)}</p>
          </div>
        </div>
      </div>
    `;
  }).join("");
}

// Show job-card modal when card clicked
function showJobCardModal() {
  const modal = document.createElement("div");
  modal.id = "job-card-modal";
  modal.className = "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";
  modal.innerHTML = `
    <div class="bg-white rounded-lg w-full max-w-5xl mx-4 max-h-[85vh] overflow-y-auto">
      <div class="bg-gradient-to-r from-metro-blue to-metro-green p-6 text-white">
        <div class="flex justify-between items-center">
          <div>
            <h3 class="text-3xl font-bold">Job-Card Status Integration</h3>
            <p class="text-lg opacity-90">IBM Maximo Work Order Management</p>
          </div>
          <button id="close-job-card-modal" class="text-white hover:text-gray-200">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      </div>
      <div class="p-6">
        <div class="mb-4 flex justify-between items-center">
          <p class="text-gray-600">Showing ${jobCardData.length} active job cards</p>
          <div class="flex space-x-2">
            <span class="px-2 py-1 bg-red-100 text-red-800 text-xs rounded">High Priority</span>
            <span class="px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded">Medium Priority</span>
            <span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded">Low Priority</span>
          </div>
        </div>
        <div id="job-card-content">${renderJobCardList()}</div>
      </div>
    </div>
  `;
  document.body.appendChild(modal);
  document.getElementById("close-job-card-modal").onclick = () => modal.remove();
  
  // Make showJobCardDetails globally available
  window.showJobCardDetails = showJobCardDetails;
}

// Attach click handler for job-card status on DOM ready
document.addEventListener("DOMContentLoaded", () => {
  const jobCard = document.querySelector('[data-feature="job-card-status"]');
  if (jobCard) {
    jobCard.style.cursor = "pointer";
    jobCard.addEventListener("click", showJobCardModal);
  }
});
// Insert Chart.js by including CDN in your HTML <head> or before this script
// <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

// Branding dashboard data simulation
const wrapExposureData = {
  labels: ["Train 1", "Train 2", "Train 3", "Train 4", "Train 5"],
  currentExposure: [75, 85, 60, 90, 70],       // example current exposure %
  contractualTarget: [80, 80, 80, 85, 75]      // contractual target %
};

function initBrandingExposureChart() {
  const ctx = document.getElementById("brandingExposureChart").getContext("2d");

  const brandingChart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: wrapExposureData.labels,
      datasets: [
        {
          label: "Current Exposure %",
          data: wrapExposureData.currentExposure,
          backgroundColor: wrapExposureData.currentExposure.map(val => val < 75 ? "#f87171" : "#4ade80"),  // red if <75 else green
          borderRadius: 4,
          barPercentage: 0.6,
        },
        {
          label: "Contractual Target %",
          data: wrapExposureData.contractualTarget,
          type: "line",
          borderColor: "#f59e0b",
          borderWidth: 2,
          pointBackgroundColor: "#f59e0b",
          fill: false,
          tension: 0.3,
          yAxisID: 'y',
        }
      ]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          min: 0,
          max: 100,
          ticks: {
            callback: val => val + "%",
            color: "#9ca3af"  // text-gray-400
          },
          grid: {
            borderColor: "#374151" // dark grid line
          }
        },
        x: {
          ticks: {
            color: "#d1d5db" // text-gray-300
          },
          grid: {
            drawOnChartArea: false
          }
        }
      },
      plugins: {
        legend: {
          labels: {
            color: "#d1d5db"  // text-gray-300
          }
        },
        tooltip: {
          mode: "index",
          intersect: false
        }
      },
      interaction: {
        mode: "nearest",
        axis: "x",
        intersect: false
      }
    }
  });

  return brandingChart;
}

// Check if exposure meets target; if not show alert
function updateExposureAlert() {
  const alertBanner = document.getElementById("alertBanner");
  let warningTrains = [];

  wrapExposureData.currentExposure.forEach((curr, idx) => {
    if(curr < wrapExposureData.contractualTarget[idx]) {
      warningTrains.push(wrapExposureData.labels[idx]);
    }
  });

  if(warningTrains.length > 0) {
    alertBanner.textContent = `Alert: Exposure below contractual target for: ${warningTrains.join(", ")}`;
    alertBanner.style.backgroundColor = "#dc2626";  // Tailwind red-600
  } else {
    alertBanner.textContent = "All trains meet or exceed contractual exposure targets.";
    alertBanner.style.backgroundColor = "#16a34a";  // Tailwind green-600
  }
}

// Initialization
document.addEventListener('DOMContentLoaded', () => {
  initBrandingExposureChart();
  updateExposureAlert();
});
document.addEventListener('DOMContentLoaded', () => {
  const brandingCard = document.getElementById('brandingFeatureCard');
  const brandingModal = document.getElementById('brandingModal');
  const brandingCloseBtn = document.getElementById('brandingCloseBtn');
  const alertDiv = document.getElementById('brandingAlert');
  let brandingChart;

  const data = {
    labels: ["Train 1", "Train 2", "Train 3", "Train 4", "Train 5"],
    currentExposure: [75, 85, 60, 90, 70],
    contractualTarget: [80, 80, 80, 85, 75]
  };

  function showModal() {
    brandingModal.classList.remove('hidden');
    if (brandingChart) brandingChart.destroy();

    const ctx = document.getElementById('brandingExposureChart').getContext('2d');
    brandingChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: data.labels,
        datasets: [{
          label: 'Current Exposure %',
          data: data.currentExposure,
          backgroundColor: data.currentExposure.map(v => v < 75 ? '#f87171' : '#4ade80'),
          borderRadius: 6,
          barPercentage: 0.6,
        }, {
          label: 'Contractual Target %',
          data: data.contractualTarget,
          type: 'line',
          borderColor: '#f59e0b',
          borderWidth: 2,
          fill: false,
          tension: 0.3,
          pointBackgroundColor: '#f59e0b',
          yAxisID: 'y',
        }]
      },
      options: {
        scales: {
          y: { min: 0, max: 100, ticks: { callback: v => v + '%'} },
          x: { grid: { display: false } }
        }
      }
    });

    updateAlert();
  }

  function updateAlert() {
    const below = data.labels.filter((_, i) => data.currentExposure[i] < data.contractualTarget[i]);
    if (below.length) {
      alertDiv.textContent = 'Alert: Exposure below contractual target for: ' + below.join(', ');
      alertDiv.style.backgroundColor = '#dc2626'; // red
    } else {
      alertDiv.textContent = 'All trains meet or exceed contractual targets.';
      alertDiv.style.backgroundColor = '#16a34a'; // green
    }
  }

  brandingCard.addEventListener('click', showModal);
  brandingCloseBtn.addEventListener('click', () => {
    brandingModal.classList.add('hidden');
  });
});
// Open/Close Modal
function openCleaningModal() {
  document.getElementById('cleaningModal').classList.remove('hidden');
  loadCleaningDashboard();
}
function closeCleaningModal() {
  document.getElementById('cleaningModal').classList.add('hidden');
}

// Fetch cleaning data
async function loadCleaningDashboard() {
  const res = await fetch('/api/cleaning-slots');
  const data = await res.json();

  // Animate KPIs
  gsap.fromTo('#kpiBays p:nth-child(2)', { innerText: 0 },
    { innerText: data.kpi.baysOccupied, duration: 1, snap: { innerText: 1 }, onUpdate() {
        this.targets()[0].innerText = Math.round(this.targets()[0].innerText);
    }});
  gsap.fromTo('#kpiStaff p:nth-child(2)', { innerText: 0 },
    { innerText: data.kpi.staffOnDuty, duration: 1.2, snap: { innerText: 1 }, onUpdate() {
        this.targets()[0].innerText = Math.round(this.targets()[0].innerText);
    }});
  gsap.fromTo('#kpiScheduled p:nth-child(2)', { innerText: 0 },
    { innerText: data.kpi.scheduledToday, duration: 1.4, snap: { innerText: 1 }, onUpdate() {
        this.targets()[0].innerText = Math.round(this.targets()[0].innerText);
    }});

  // Timeline slots animation
  const timelineEl = document.getElementById('timelineContainer');
  timelineEl.innerHTML = '';
  data.slots.forEach((slot, i) => {
    const div = document.createElement('div');
    div.innerHTML = `
      <span>${slot.time}</span>
      <span>${slot.trainId}</span>
      <span>${slot.staff}</span>
      <span><i class="${slot.type==='Deep Clean'?'fas fa-sparkles':'fas fa-water'}"></i></span>
    `;
    timelineEl.appendChild(div);
    gsap.to(div, { opacity:1, y:0, delay: i*0.2, duration:0.6 });
  });

  // Bay grid animation
  const bayGrid = document.getElementById('bayGrid');
  bayGrid.innerHTML = '';
  data.bays.forEach((bay, i) => {
    const div = document.createElement('div');
    div.className = `bay ${bay.status}`;
    div.textContent = `Bay ${bay.id}`;
    bayGrid.appendChild(div);
    gsap.to(div, { opacity:1, y:0, delay: i*0.15, duration:0.5, ease:'back.out(1.7)' });
  });
}

// Export PDF animation stub
function exportCleaningPDF() {
  // Animate download icon
  gsap.to('#cleaningCard i.fa-download', { rotation: 360, duration: 0.8 });
  // Then trigger export logic...
}

// Initialize brush icon sweep
gsap.to('#brushIcon i', {
  rotation: 20,
  yoyo: true,
  repeat: -1,
  duration: 0.5,
  ease: 'power1.inOut'
});
